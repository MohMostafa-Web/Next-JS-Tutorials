//  import { useRouter } from "next/router";

function SinglePost({ post }) {
  /* using "useRouter()" to solve error "TypeError: Cannot read properties of undefined" */
  // const router = useRouter();

  /*
    If getStaticPaths fallback is true,
      Fallback Msg will be shown if the path is not generated by getStaticPaths() 
  */
  // if (router.isFallback) {
  //   return <h2>Loading...</h2>;
  // }

  return (
    <>
      <h4>
        {post.id}. {post.title}
      </h4>
      <p>{post.body}</p>
    </>
  );
}

export default SinglePost;

/* using "getStaticPaths()" to define possible values of dynamic route "postId" */
export async function getStaticPaths() {
  /* Get dynamically "postId" from API to create "paths" Array */
  // const response = await fetch("https://jsonplaceholder.typicode.com/posts");
  // const data = await response.json();

  // const paths = data.map(post => {
  //   return { params: { postId: `${post.id}` } }; // using `${}` to convert it to string
  // });

  return {
    paths: [
      { params: { postId: "1" } },
      { params: { postId: "2" } },
      { params: { postId: "3" } },
    ],
    fallback: "blocking", // it could be false or true or "blocking"
  };

  // return {
  //   paths, // paths: paths
  //   fallback: false,
  // }
}

/* using "getStaticProps()" to fetch data from API */
export async function getStaticProps(context) {
  /* using "context.params.postId" to get value of dynamicRoute "postId" */
  const { params } = context;
  // console.log(params.postId); // debug

  /* [1] Get external data from API */
  const response = await fetch(
    `https://jsonplaceholder.typicode.com/posts/${params.postId}`
  );
  const data = await response.json();

  console.log(`Generating page for /posts/${params.postId}`); // debug
  
  /* 
    If getStaticPaths fallback is true or "blocking"
      - Check if no fetched data, to return object with property "notFound: true" which shows 404 page
  */
  if(!data.id) {
    return {
      notFound: true,
    }
  }

  /* [2] return Object of the `props` key will be passed to the `SinglePost` component */
  return {
    props: {
      post: data,
    },
  };
}
